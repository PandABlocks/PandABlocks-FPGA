------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor: Xilinx
-- \   \   \/     Version : 3.5
--  \   \         Application : 7 Series FPGAs Transceivers Wizard
--  /   /         Filename : fmcgtx_exdes.vhd
-- /___/   /\
-- \   \  /  \
--  \___\/\___\
--
--
-- Module fmcgtx_exdes
-- Generated by Xilinx 7 Series FPGAs Transceivers Wizard
--
--
-- (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_misc.all;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

--***********************************Entity Declaration************************

entity fmcgtx_exdes is
generic (
    EXAMPLE_CONFIG_INDEPENDENT_LANES    : integer   := 1;
    EXAMPLE_LANE_WITH_START_CHAR        : integer   := 0;
    EXAMPLE_WORDS_IN_BRAM               : integer   := 512;
    EXAMPLE_SIM_GTRESET_SPEEDUP         : string    := "TRUE";
    STABLE_CLOCK_PERIOD                 : integer   := 10;
    EXAMPLE_USE_CHIPSCOPE               : integer   := 0
);
port (
    --Q0_CLK1_GTREFCLK_PAD_N_IN           : in   std_logic;
    --Q0_CLK1_GTREFCLK_PAD_P_IN           : in   std_logic;
    Q0_CLK1_GTREFCLK_PAD_IN           : in   std_logic;
    GTREFCLK                            : out  std_logic;
    drpclk_in_i                         : in   std_logic;
    SOFT_RESET                          : in   std_logic;
    TRACK_DATA_OUT                      : out  std_logic_vector(31 downto 0);
    ERROR_COUNT                         : out  std_logic_vector(31 downto 0);
    RXN_IN                              : in   std_logic;
    RXP_IN                              : in   std_logic;
    TXN_OUT                             : out  std_logic;
    TXP_OUT                             : out  std_logic
);


end fmcgtx_exdes;

architecture RTL of fmcgtx_exdes is
    attribute DowngradeIPIdentifiedWarnings: string;
    attribute DowngradeIPIdentifiedWarnings of RTL : architecture is "yes";

    attribute CORE_GENERATION_INFO : string;
    attribute CORE_GENERATION_INFO of RTL : architecture is "fmcgtx,gtwizard_v3_5,{protocol_file=aurora_8b10b_single_lane_2byte}";

--**************************Component Declarations*****************************



component fmcgtx_support
generic
(
    -- Simulation attributes
    EXAMPLE_SIM_GTRESET_SPEEDUP    : string    := "FALSE";    -- Set to TRUE to speed up sim reset
    STABLE_CLOCK_PERIOD            : integer   := 10
);
port
(
    SOFT_RESET_TX_IN                        : in   std_logic;
    SOFT_RESET_RX_IN                        : in   std_logic;
    DONT_RESET_ON_DATA_ERROR_IN             : in   std_logic;
    --Q0_CLK1_GTREFCLK_PAD_N_IN               : in   std_logic;
    --Q0_CLK1_GTREFCLK_PAD_P_IN               : in   std_logic;
    Q0_CLK1_GTREFCLK_PAD_IN           : in   std_logic;

    GT0_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_DATA_VALID_IN                       : in   std_logic;

    GT0_TXUSRCLK_OUT                        : out  std_logic;
    GT0_TXUSRCLK2_OUT                       : out  std_logic;
    GT0_RXUSRCLK_OUT                        : out  std_logic;
    GT0_RXUSRCLK2_OUT                       : out  std_logic;

    --_________________________________________________________________________
        --GT0  (X0Y0)
    --____________________________CHANNEL PORTS________________________________
    --------------------------------- CPLL Ports -------------------------------
    gt0_cpllfbclklost_out                   : out  std_logic;
    gt0_cplllock_out                        : out  std_logic;
    gt0_cpllreset_in                        : in   std_logic;
    ---------------------------- Channel - DRP Ports  --------------------------
    gt0_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt0_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt0_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt0_drpen_in                            : in   std_logic;
    gt0_drprdy_out                          : out  std_logic;
    gt0_drpwe_in                            : in   std_logic;
    --------------------------- Digital Monitor Ports --------------------------
    gt0_dmonitorout_out                     : out  std_logic_vector(7 downto 0);
    ------------------------------- Loopback Ports -----------------------------
    gt0_loopback_in                         : in   std_logic_vector(2 downto 0);
    ------------------------------ Power-Down Ports ----------------------------
    gt0_rxpd_in                             : in   std_logic_vector(1 downto 0);
    gt0_txpd_in                             : in   std_logic_vector(1 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt0_eyescanreset_in                     : in   std_logic;
    gt0_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt0_eyescandataerror_out                : out  std_logic;
    gt0_eyescantrigger_in                   : in   std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt0_rxcdrhold_in                        : in   std_logic;
    gt0_rxcdrovrden_in                      : in   std_logic;
    ------------------- Receive Ports - Clock Correction Ports -----------------
    gt0_rxclkcorcnt_out                     : out  std_logic_vector(1 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt0_rxdata_out                          : out  std_logic_vector(15 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt0_rxprbserr_out                       : out  std_logic;
    gt0_rxprbssel_in                        : in   std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt0_rxprbscntreset_in                   : in   std_logic;
    ------------------ Receive Ports - RX 8B/10B Decoder Ports -----------------
    gt0_rxdisperr_out                       : out  std_logic_vector(1 downto 0);
    gt0_rxnotintable_out                    : out  std_logic_vector(1 downto 0);
    --------------------------- Receive Ports - RX AFE -------------------------
    gt0_gtxrxp_in                           : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt0_gtxrxn_in                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt0_rxbufreset_in                       : in   std_logic;
    gt0_rxbufstatus_out                     : out  std_logic_vector(2 downto 0);
    -------------- Receive Ports - RX Byte and Word Alignment Ports ------------
    gt0_rxbyteisaligned_out                 : out  std_logic;
    gt0_rxbyterealign_out                   : out  std_logic;
    gt0_rxcommadet_out                      : out  std_logic;
    gt0_rxmcommaalignen_in                  : in   std_logic;
    gt0_rxpcommaalignen_in                  : in   std_logic;
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt0_rxdfelpmreset_in                    : in   std_logic;
    gt0_rxmonitorout_out                    : out  std_logic_vector(6 downto 0);
    gt0_rxmonitorsel_in                     : in   std_logic_vector(1 downto 0);
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt0_gtrxreset_in                        : in   std_logic;
    gt0_rxpcsreset_in                       : in   std_logic;
    gt0_rxpmareset_in                       : in   std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt0_rxlpmen_in                          : in   std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt0_rxpolarity_in                       : in   std_logic;
    ------------------- Receive Ports - RX8B/10B Decoder Ports -----------------
    gt0_rxchariscomma_out                   : out  std_logic_vector(1 downto 0);
    gt0_rxcharisk_out                       : out  std_logic_vector(1 downto 0);
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt0_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt0_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt0_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt0_gttxreset_in                        : in   std_logic;
    gt0_txuserrdy_in                        : in   std_logic;
    ---------------- Transmit Ports - 8b10b Encoder Control Ports --------------
    gt0_txchardispmode_in                   : in   std_logic_vector(1 downto 0);
    gt0_txchardispval_in                    : in   std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt0_txprbsforceerr_in                   : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt0_txbufstatus_out                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt0_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    gt0_txmaincursor_in                     : in   std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt0_txdata_in                           : in   std_logic_vector(15 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt0_gtxtxn_out                          : out  std_logic;
    gt0_gtxtxp_out                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt0_txoutclkfabric_out                  : out  std_logic;
    gt0_txoutclkpcs_out                     : out  std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt0_txcharisk_in                        : in   std_logic_vector(1 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt0_txpcsreset_in                       : in   std_logic;
    gt0_txresetdone_out                     : out  std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt0_txpolarity_in                       : in   std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt0_txprbssel_in                        : in   std_logic_vector(2 downto 0);


    --____________________________COMMON PORTS________________________________
     GT0_QPLLOUTCLK_OUT  : out std_logic;
     GT0_QPLLOUTREFCLK_OUT : out std_logic;
        sysclk_in : in std_logic
);
end component;



component fmcgtx_GT_FRAME_GEN
generic
(
     WORDS_IN_BRAM    : integer := 512
);
port
(
    -- User Interface
    TX_DATA_OUT             : out   std_logic_vector(79 downto 0);
    TXCTRL_OUT              : out   std_logic_vector(7 downto 0);
    -- System Interface
    USER_CLK                : in    std_logic;
    SYSTEM_RESET            : in    std_logic
);
end component;

component fmcgtx_GT_FRAME_CHECK
generic
(
    RX_DATA_WIDTH            : integer := 16;
    RXCTRL_WIDTH             : integer := 2;
    WORDS_IN_BRAM            : integer := 256;
    CHANBOND_SEQ_LEN         : integer := 1;
    COMMA_DOUBLE             : std_logic_vector(15 downto 0) := x"f628";
    START_OF_PACKET_CHAR     : std_logic_vector(15 downto 0) := x"02bc"
);
port
(
    -- User Interface
    RX_DATA_IN               : in  std_logic_vector((RX_DATA_WIDTH-1) downto 0);
    RXCTRL_IN                : in  std_logic_vector((RXCTRL_WIDTH-1) downto 0);
    RXENMCOMMADET_OUT        : out std_logic;
    RXENPCOMMADET_OUT        : out std_logic;
    RX_ENCHAN_SYNC_OUT       : out std_logic;
    RX_CHANBOND_SEQ_IN       : in  std_logic;

    -- Control Interface
    INC_IN                   : in  std_logic;
    INC_OUT                  : out std_logic;
    PATTERN_MATCHB_OUT       : out std_logic;
    RESET_ON_ERROR_IN        : in  std_logic;


    -- Error Monitoring
    ERROR_COUNT_OUT          : out std_logic_vector(7 downto 0);

    -- Track Data
    TRACK_DATA_OUT           : out std_logic;



    -- System Interface
    USER_CLK                 : in std_logic;
    SYSTEM_RESET             : in std_logic
);
end component;

component vio_0
port (
    clk : in std_logic;
    probe_in0 : in std_logic_vector(0 downto 0);
    probe_out0 : out std_logic_vector(0 downto 0)
);
end component;

component ila_0
port (
    clk : in std_logic;
    probe0 : in std_logic_vector(79 downto 0);
    probe1: in std_logic_vector(7 downto 0);
    probe2: in std_logic_vector(0 downto 0);
    probe3: in std_logic_vector(1 downto 0);
    probe4: in std_logic_vector(7 downto 0);
    probe5: in std_logic_vector(0 downto 0);
    probe6: in std_logic_vector(0 downto 0)
);
end component;

component ila_1
port (
    clk : in std_logic;
    probe0: in std_logic_vector(0 downto 0);
    probe1: in std_logic_vector(0 downto 0)
);
end component;


--***********************************Parameter Declarations********************

    constant DLY : time := 1 ns;

--************************** Register Declarations ****************************
attribute ASYNC_REG                         : string;
signal   gt_txfsmresetdone_i                : std_logic;
signal   gt_rxfsmresetdone_i                : std_logic;
--signal   gt_txfsmresetdone_r                : std_logic;
--signal   gt_txfsmresetdone_r2               : std_logic;
--attribute ASYNC_REG of gt_txfsmresetdone_r  : signal is "TRUE";
--attribute ASYNC_REG of gt_txfsmresetdone_r2 : signal is "TRUE";

signal   gt0_txfsmresetdone_i               : std_logic;
signal   gt0_rxfsmresetdone_i               : std_logic;
signal   gt0_txfsmresetdone_r               : std_logic;
signal   gt0_txfsmresetdone_r2              : std_logic;
attribute ASYNC_REG of gt0_txfsmresetdone_r : signal is "TRUE";
attribute ASYNC_REG of gt0_txfsmresetdone_r2: signal is "TRUE";
signal   gt0_rxresetdone_r                  : std_logic;
signal   gt0_rxresetdone_r2                 : std_logic;
signal   gt0_rxresetdone_r3                 : std_logic;
attribute ASYNC_REG of gt0_rxresetdone_r    : signal is "TRUE";
attribute ASYNC_REG of gt0_rxresetdone_r2   : signal is "TRUE";
attribute ASYNC_REG of gt0_rxresetdone_r3   : signal is "TRUE";


signal   reset_pulse                        : std_logic_vector(3 downto 0);
signal   reset_counter                      : unsigned(5 downto 0) := "000000";


--**************************** Wire Declarations ******************************
    -------------------------- GT Wrapper Wires ------------------------------
    --________________________________________________________________________
    --________________________________________________________________________
    --GT0  (X0Y0)

    --------------------------------- CPLL Ports -------------------------------
    signal  gt0_cpllfbclklost_i             : std_logic;
    signal  gt0_cplllock_i                  : std_logic;
    signal  gt0_cpllrefclklost_i            : std_logic;
    signal  gt0_cpllreset_i                 : std_logic;
    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt0_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt0_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpen_i                     : std_logic;
    signal  gt0_drprdy_i                    : std_logic;
    signal  gt0_drpwe_i                     : std_logic;
    --------------------------- Digital Monitor Ports --------------------------
    signal  gt0_dmonitorout_i               : std_logic_vector(7 downto 0);
    ------------------------------- Loopback Ports -----------------------------
    signal  gt0_loopback_i                  : std_logic_vector(2 downto 0);
    ------------------------------ Power-Down Ports ----------------------------
    signal  gt0_rxpd_i                      : std_logic_vector(1 downto 0);
    signal  gt0_txpd_i                      : std_logic_vector(1 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt0_eyescanreset_i              : std_logic;
    signal  gt0_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt0_eyescandataerror_i          : std_logic;
    signal  gt0_eyescantrigger_i            : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt0_rxcdrhold_i                 : std_logic;
    signal  gt0_rxcdrovrden_i               : std_logic;
    ------------------- Receive Ports - Clock Correction Ports -----------------
    signal  gt0_rxclkcorcnt_i               : std_logic_vector(1 downto 0);
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    signal  gt0_rxdata_i                    : std_logic_vector(15 downto 0);
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    signal  gt0_rxprbserr_i                 : std_logic;
    signal  gt0_rxprbssel_i                 : std_logic_vector(2 downto 0);
    ------------------- Receive Ports - Pattern Checker ports ------------------
    signal  gt0_rxprbscntreset_i            : std_logic;
    ------------------ Receive Ports - RX 8B/10B Decoder Ports -----------------
    signal  gt0_rxdisperr_i                 : std_logic_vector(1 downto 0);
    signal  gt0_rxnotintable_i              : std_logic_vector(1 downto 0);
    --------------------------- Receive Ports - RX AFE -------------------------
    signal  gt0_gtxrxp_i                    : std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt0_gtxrxn_i                    : std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    signal  gt0_rxbufreset_i                : std_logic;
    signal  gt0_rxbufstatus_i               : std_logic_vector(2 downto 0);
    -------------- Receive Ports - RX Byte and Word Alignment Ports ------------
    signal  gt0_rxbyteisaligned_i           : std_logic;
    signal  gt0_rxbyterealign_i             : std_logic;
    signal  gt0_rxcommadet_i                : std_logic;
    signal  gt0_rxmcommaalignen_i           : std_logic;
    signal  gt0_rxpcommaalignen_i           : std_logic;
    -------------------- Receive Ports - RX Equailizer Ports -------------------
    signal  gt0_rxlpmhfhold_i               : std_logic;
    signal  gt0_rxlpmlfhold_i               : std_logic;
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    signal  gt0_rxdfelpmreset_i             : std_logic;
    signal  gt0_rxmonitorout_i              : std_logic_vector(6 downto 0);
    signal  gt0_rxmonitorsel_i              : std_logic_vector(1 downto 0);
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt0_rxoutclk_i                  : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt0_gtrxreset_i                 : std_logic;
    signal  gt0_rxpcsreset_i                : std_logic;
    signal  gt0_rxpmareset_i                : std_logic;
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    signal  gt0_rxlpmen_i                   : std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    signal  gt0_rxpolarity_i                : std_logic;
    ------------------- Receive Ports - RX8B/10B Decoder Ports -----------------
    signal  gt0_rxchariscomma_i             : std_logic_vector(1 downto 0);
    signal  gt0_rxcharisk_i                 : std_logic_vector(1 downto 0);
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt0_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt0_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt0_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt0_gttxreset_i                 : std_logic;
    signal  gt0_txuserrdy_i                 : std_logic;
    ---------------- Transmit Ports - 8b10b Encoder Control Ports --------------
    signal  gt0_txchardispmode_i            : std_logic_vector(1 downto 0);
    signal  gt0_txchardispval_i             : std_logic_vector(1 downto 0);
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    signal  gt0_txprbsforceerr_i            : std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    signal  gt0_txbufstatus_i               : std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt0_txdiffctrl_i                : std_logic_vector(3 downto 0);
    signal  gt0_txmaincursor_i              : std_logic_vector(6 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt0_txdata_i                    : std_logic_vector(15 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt0_gtxtxn_i                    : std_logic;
    signal  gt0_gtxtxp_i                    : std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt0_txoutclk_i                  : std_logic;
    signal  gt0_txoutclkfabric_i            : std_logic;
    signal  gt0_txoutclkpcs_i               : std_logic;
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    signal  gt0_txcharisk_i                 : std_logic_vector(1 downto 0);
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt0_txpcsreset_i                : std_logic;
    signal  gt0_txpmareset_i                : std_logic;
    signal  gt0_txresetdone_i               : std_logic;
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    signal  gt0_txpolarity_i                : std_logic;
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    signal  gt0_txprbssel_i                 : std_logic_vector(2 downto 0);

    --____________________________COMMON PORTS________________________________
    ---------------------- Common Block  - Ref Clock Ports ---------------------
    signal  gt0_gtrefclk1_common_i          : std_logic;
    ------------------------- Common Block - QPLL Ports ------------------------
    signal  gt0_qplllock_i                  : std_logic;
    signal  gt0_qpllrefclklost_i            : std_logic;
    signal  gt0_qpllreset_i                 : std_logic;


    ------------------------------- Global Signals -----------------------------
    signal  gt0_tx_system_reset_c           : std_logic;
    signal  gt0_rx_system_reset_c           : std_logic;
    signal  tied_to_ground_i                : std_logic;
    signal  tied_to_ground_vec_i            : std_logic_vector(63 downto 0);
    signal  tied_to_vcc_i                   : std_logic;
    signal  tied_to_vcc_vec_i               : std_logic_vector(7 downto 0);
    signal  DRPCLK_IN                       : std_logic;
    signal  GTTXRESET_IN                    : std_logic;
    signal  GTRXRESET_IN                    : std_logic;
    signal  CPLLRESET_IN                    : std_logic;
    signal  QPLLRESET_IN                    : std_logic;

    attribute keep: string;
   ------------------------------- User Clocks ---------------------------------
    signal    gt0_txusrclk_i                  : std_logic;
    signal    gt0_txusrclk2_i                 : std_logic;
    signal    gt0_rxusrclk_i                  : std_logic;
    signal    gt0_rxusrclk2_i                 : std_logic;




    ----------------------------- Reference Clocks ----------------------------

signal    q0_clk1_refclk_i                : std_logic;


    ----------------------- Frame check/gen Module Signals --------------------
signal    gt0_matchn_i                    : std_logic;

signal    gt0_txcharisk_float_i           : std_logic_vector(5 downto 0);

signal    gt0_txdata_float16_i            : std_logic_vector(15 downto 0);
signal    gt0_txdata_float_i              : std_logic_vector(47 downto 0);

signal    gt0_track_data_i                : std_logic;
signal    gt0_block_sync_i                : std_logic;
signal    gt0_error_count_i               : std_logic_vector(7 downto 0);
signal    gt0_frame_check_reset_i         : std_logic;
signal    gt0_inc_in_i                    : std_logic;
signal    gt0_inc_out_i                   : std_logic;
signal    gt0_unscrambled_data_i          : std_logic_vector(15 downto 0);

signal    reset_on_data_error_i           : std_logic;

signal    gt0_error_count_synca           : std_logic_vector(7 downto 0);
signal    gt0_error_count_syncb           : std_logic_vector(7 downto 0);
signal    gt0_track_data_synca            : std_logic;
signal    gt0_track_data_syncb            : std_logic;

attribute ASYNC_REG of gt0_error_count_synca : signal is "TRUE";
attribute ASYNC_REG of gt0_error_count_syncb : signal is "TRUE";
attribute ASYNC_REG of gt0_track_data_synca : signal is "TRUE";
attribute ASYNC_REG of gt0_track_data_syncb : signal is "TRUE";

    ----------------------- Debug Signals ---------------------------------

    signal  tx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  rx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  shared_vio_control_i            : std_logic_vector(35 downto 0);
    signal  ila_control_i                   : std_logic_vector(35 downto 0);
    signal  channel_drp_vio_control_i       : std_logic_vector(35 downto 0);
    signal  common_drp_vio_control_i        : std_logic_vector(35 downto 0);
    signal  tx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  tx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  shared_vio_in_i                 : std_logic_vector(31 downto 0);
    signal  shared_vio_out_i                : std_logic_vector(31 downto 0);
    signal  ila_in_i                        : std_logic_vector(163 downto 0);
    signal  channel_drp_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_in_i       : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_in_i        : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_out_i       : std_logic_vector(31 downto 0);

    signal  gt0_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_ila_in_i                    : std_logic_vector(163 downto 0);
    signal  gt0_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);


signal    gttxreset_i                     : std_logic;
signal    gtrxreset_i                     : std_logic;

signal    user_tx_reset_i                 : std_logic;
signal    user_rx_reset_i                 : std_logic;
signal    tx_vio_clk_i                    : std_logic;
signal    tx_vio_clk_mux_out_i            : std_logic;
signal    rx_vio_ila_clk_i                : std_logic;
signal    rx_vio_ila_clk_mux_out_i        : std_logic;

signal    cpllreset_i                     : std_logic;


   signal zero_vector_rx_80 : std_logic_vector ((80 -16) -1 downto 0) := (others => '0');
   signal zero_vector_rx_8 : std_logic_vector ((8 -2) -1 downto 0) := (others => '0');
  signal gt0_rxdata_ila : std_logic_vector (79 downto 0);
  signal gt0_rxdatavalid_ila : std_logic_vector (1 downto 0);
  signal gt0_rxcharisk_ila : std_logic_vector (7 downto 0);
  signal gt0_txmmcm_lock_ila : std_logic_vector (0 downto 0);
  signal gt0_rxmmcm_lock_ila : std_logic_vector (0 downto 0);
  signal gt0_rxresetdone_ila : std_logic_vector (0 downto 0);
  signal gt0_txresetdone_ila : std_logic_vector (0 downto 0);
  signal tied_to_ground_ila_i : std_logic_vector (0 downto 0);

  -- update with the actual reset name
  signal soft_reset_i  : std_logic;
  signal soft_reset_vio_i  : std_logic_vector(0 downto 0);
  signal gt0_rxfsmresetdone_s : std_logic_vector(0 downto 0);
  signal rxresetdone_vio_s : std_logic_vector(0 downto 0);
  signal rxresetdone_vio_i : std_logic;

begin

GTREFCLK <= gt0_txusrclk2_i;

--  Static signal Assigments
tied_to_ground_i     <= '0';
tied_to_ground_vec_i <= x"0000000000000000";
tied_to_vcc_i        <= '1';
tied_to_vcc_vec_i    <= "11111111";

q0_clk1_refclk_i     <= '0';

----------------------------- The GT Wrapper -----------------------------

-- Use the instantiation template in the example directory to add the GT wrapper to your design.
-- In this example, the wrapper is wired up for basic operation with a frame generator and frame
-- checker. The GTs will reset, then attempt to align and transmit data. If channel bonding is
-- enabled, bonding should occur after alignment.


fmcgtx_support_i : fmcgtx_support
generic map
(
    EXAMPLE_SIM_GTRESET_SPEEDUP     =>      EXAMPLE_SIM_GTRESET_SPEEDUP,
    STABLE_CLOCK_PERIOD             =>      STABLE_CLOCK_PERIOD
)
port map
(
    SOFT_RESET_TX_IN                =>      soft_reset_i,
    SOFT_RESET_RX_IN                =>      soft_reset_i,
    DONT_RESET_ON_DATA_ERROR_IN     =>      tied_to_ground_i,
    --Q0_CLK1_GTREFCLK_PAD_N_IN => Q0_CLK1_GTREFCLK_PAD_N_IN,
    --Q0_CLK1_GTREFCLK_PAD_P_IN => Q0_CLK1_GTREFCLK_PAD_P_IN,
    Q0_CLK1_GTREFCLK_PAD_IN => Q0_CLK1_GTREFCLK_PAD_IN,
    GT0_TX_FSM_RESET_DONE_OUT       =>      gt0_txfsmresetdone_i,
    GT0_RX_FSM_RESET_DONE_OUT       =>      gt0_rxfsmresetdone_i,
    GT0_DATA_VALID_IN               =>      gt0_track_data_i,

    GT0_TXUSRCLK_OUT => gt0_txusrclk_i,
    GT0_TXUSRCLK2_OUT => gt0_txusrclk2_i,
    GT0_RXUSRCLK_OUT => gt0_rxusrclk_i,
    GT0_RXUSRCLK2_OUT => gt0_rxusrclk2_i,

    --_____________________________________________________________________
    --_____________________________________________________________________
    --GT0  (X0Y0)

    --------------------------------- CPLL Ports -------------------------------
    gt0_cpllfbclklost_out           =>      gt0_cpllfbclklost_i,
    gt0_cplllock_out                =>      gt0_cplllock_i,
    gt0_cpllreset_in                =>      tied_to_ground_i,
    ---------------------------- Channel - DRP Ports  --------------------------
    gt0_drpaddr_in                  =>      gt0_drpaddr_i,
    gt0_drpdi_in                    =>      gt0_drpdi_i,
    gt0_drpdo_out                   =>      gt0_drpdo_i,
    gt0_drpen_in                    =>      gt0_drpen_i,
    gt0_drprdy_out                  =>      gt0_drprdy_i,
    gt0_drpwe_in                    =>      gt0_drpwe_i,
    --------------------------- Digital Monitor Ports --------------------------
    gt0_dmonitorout_out             =>      gt0_dmonitorout_i,
    ------------------------------- Loopback Ports -----------------------------
    gt0_loopback_in                 =>      "000",
    ------------------------------ Power-Down Ports ----------------------------
    gt0_rxpd_in                     =>      gt0_rxpd_i,
    gt0_txpd_in                     =>      gt0_txpd_i,
    --------------------- RX Initialization and Reset Ports --------------------
    gt0_eyescanreset_in             =>      tied_to_ground_i,
    gt0_rxuserrdy_in                =>      tied_to_ground_i,
    -------------------------- RX Margin Analysis Ports ------------------------
    gt0_eyescandataerror_out        =>      gt0_eyescandataerror_i,
    gt0_eyescantrigger_in           =>      tied_to_ground_i,
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt0_rxcdrhold_in                =>      gt0_rxcdrhold_i,
    gt0_rxcdrovrden_in              =>      tied_to_ground_i,
    ------------------- Receive Ports - Clock Correction Ports -----------------
    gt0_rxclkcorcnt_out             =>      gt0_rxclkcorcnt_i,
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    gt0_rxdata_out                  =>      gt0_rxdata_i,
    ------------------- Receive Ports - Pattern Checker Ports ------------------
    gt0_rxprbserr_out               =>      gt0_rxprbserr_i,
    gt0_rxprbssel_in                =>      gt0_rxprbssel_i,
    ------------------- Receive Ports - Pattern Checker ports ------------------
    gt0_rxprbscntreset_in           =>      gt0_rxprbscntreset_i,
    ------------------ Receive Ports - RX 8B/10B Decoder Ports -----------------
    gt0_rxdisperr_out               =>      gt0_rxdisperr_i,
    gt0_rxnotintable_out            =>      gt0_rxnotintable_i,
    --------------------------- Receive Ports - RX AFE -------------------------
    gt0_gtxrxp_in                   =>      RXP_IN,
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt0_gtxrxn_in                   =>      RXN_IN,
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    gt0_rxbufreset_in               =>      gt0_rxbufreset_i,
    gt0_rxbufstatus_out             =>      gt0_rxbufstatus_i,
    -------------- Receive Ports - RX Byte and Word Alignment Ports ------------
    gt0_rxbyteisaligned_out         =>      gt0_rxbyteisaligned_i,
    gt0_rxbyterealign_out           =>      gt0_rxbyterealign_i,
    gt0_rxcommadet_out              =>      gt0_rxcommadet_i,
    gt0_rxmcommaalignen_in          =>      gt0_rxmcommaalignen_i,
    gt0_rxpcommaalignen_in          =>      gt0_rxpcommaalignen_i,
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    gt0_rxdfelpmreset_in            =>      tied_to_ground_i,
    gt0_rxmonitorout_out            =>      gt0_rxmonitorout_i,
    gt0_rxmonitorsel_in             =>      "00",
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt0_gtrxreset_in                =>      tied_to_ground_i,
    gt0_rxpcsreset_in               =>      tied_to_ground_i,
    gt0_rxpmareset_in               =>      gt0_rxpmareset_i,
    ------------------ Receive Ports - RX Margin Analysis ports ----------------
    gt0_rxlpmen_in                  =>      gt0_rxlpmen_i,
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    gt0_rxpolarity_in               =>      gt0_rxpolarity_i,
    ------------------- Receive Ports - RX8B/10B Decoder Ports -----------------
    gt0_rxchariscomma_out           =>      gt0_rxchariscomma_i,
    gt0_rxcharisk_out               =>      gt0_rxcharisk_i,
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt0_rxresetdone_out             =>      gt0_rxresetdone_i,
    ------------------------ TX Configurable Driver Ports ----------------------
    gt0_txpostcursor_in             =>      gt0_txpostcursor_i,
    gt0_txprecursor_in              =>      gt0_txprecursor_i,
    --------------------- TX Initialization and Reset Ports --------------------
    gt0_gttxreset_in                =>      tied_to_ground_i,
    gt0_txuserrdy_in                =>      tied_to_ground_i,
    ---------------- Transmit Ports - 8b10b Encoder Control Ports --------------
    gt0_txchardispmode_in           =>      gt0_txchardispmode_i,
    gt0_txchardispval_in            =>      gt0_txchardispval_i,
    ------------------ Transmit Ports - Pattern Generator Ports ----------------
    gt0_txprbsforceerr_in           =>      gt0_txprbsforceerr_i,
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    gt0_txbufstatus_out             =>      gt0_txbufstatus_i,
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt0_txdiffctrl_in               =>      gt0_txdiffctrl_i,
    gt0_txmaincursor_in             =>      "0000000",
    ------------------ Transmit Ports - TX Data Path interface -----------------
    gt0_txdata_in                   =>      gt0_txdata_i,
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    gt0_gtxtxn_out                  =>      TXN_OUT,
    gt0_gtxtxp_out                  =>      TXP_OUT,
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt0_txoutclkfabric_out          =>      gt0_txoutclkfabric_i,
    gt0_txoutclkpcs_out             =>      gt0_txoutclkpcs_i,
    --------------------- Transmit Ports - TX Gearbox Ports --------------------
    gt0_txcharisk_in                =>      gt0_txcharisk_i,
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt0_txpcsreset_in               =>      tied_to_ground_i,
    gt0_txresetdone_out             =>      gt0_txresetdone_i,
    ----------------- Transmit Ports - TX Polarity Control Ports ---------------
    gt0_txpolarity_in               =>      gt0_txpolarity_i,
    ------------------ Transmit Ports - pattern Generator Ports ----------------
    gt0_txprbssel_in                =>      gt0_txprbssel_i,

    --____________________________COMMON PORTS________________________________
     GT0_QPLLOUTCLK_OUT  => open,
     GT0_QPLLOUTREFCLK_OUT => open,
     sysclk_in => drpclk_in_i
);

-------------------------- User Module Resets -----------------------------
-- All the User Modules i.e. FRAME_GEN, FRAME_CHECK and the sync modules
-- are held in reset till the RESETDONE goes high.
-- The RESETDONE is registered a couple of times on USRCLK2 and connected
-- to the reset of the modules
process(gt0_rxusrclk2_i,gt0_rxresetdone_i)
begin
    if(gt0_rxresetdone_i = '0') then
        gt0_rxresetdone_r  <= '0'   after DLY;
        gt0_rxresetdone_r2 <= '0'   after DLY;
        gt0_rxresetdone_r3 <= '0'   after DLY;
    elsif (gt0_rxusrclk2_i'event and gt0_rxusrclk2_i = '1') then
        gt0_rxresetdone_r  <= gt0_rxresetdone_i   after DLY;
        gt0_rxresetdone_r2 <= gt0_rxresetdone_r   after DLY;
        gt0_rxresetdone_r3  <= gt0_rxresetdone_r2   after DLY;
    end if;
end process;

process(gt0_txusrclk2_i,gt0_txfsmresetdone_i)
begin
    if(gt0_txfsmresetdone_i = '0') then
        gt0_txfsmresetdone_r  <= '0'   after DLY;
        gt0_txfsmresetdone_r2 <= '0'   after DLY;
    elsif (gt0_txusrclk2_i'event and gt0_txusrclk2_i = '1') then
        gt0_txfsmresetdone_r  <= gt0_txfsmresetdone_i   after DLY;
        gt0_txfsmresetdone_r2 <= gt0_txfsmresetdone_r   after DLY;
    end if;
end process;

------------------------------ Frame Generators ---------------------------
-- The example design uses Block RAM based frame generators to provide test
-- data to the GTs for transmission. By default the frame generators are
-- loaded with an incrementing data sequence that includes commas/alignment
-- characters for alignment. If your protocol uses channel bonding, the
-- frame generator will also be preloaded with a channel bonding sequence.

-- You can modify the data transmitted by changing the INIT values of the frame
-- generator in this file. Pay careful attention to bit order and the spacing
-- of your control and alignment characters.

gt0_frame_gen : fmcgtx_GT_FRAME_GEN
generic map
(
    WORDS_IN_BRAM                   =>      EXAMPLE_WORDS_IN_BRAM
)
port map
(
    -- User Interface
    TX_DATA_OUT(79 downto 32)       =>      gt0_txdata_float_i,
    TX_DATA_OUT(15 downto 0)        =>      gt0_txdata_float16_i,
    TX_DATA_OUT(31 downto 16)       =>      gt0_txdata_i,

    TXCTRL_OUT(7 downto 2)          =>      gt0_txcharisk_float_i,
    TXCTRL_OUT(1 downto 0)          =>      gt0_txcharisk_i,
    -- System Interface
    USER_CLK                        =>      gt0_txusrclk2_i,
    SYSTEM_RESET                    =>      gt0_tx_system_reset_c
);

---------------------------------- Frame Checkers -------------------------
-- The example design uses Block RAM based frame checkers to verify incoming
-- data. By default the frame generators are loaded with a data sequence that
-- matches the outgoing sequence of the frame generators for the TX ports.

-- You can modify the expected data sequence by changing the INIT values of the frame
-- checkers in this file. Pay careful attention to bit order and the spacing
-- of your control and alignment characters.

-- When the frame checker receives data, it attempts to synchronise to the
-- incoming pattern by looking for the first sequence in the pattern. Once it
-- finds the first sequence, it increments through the sequence, and indicates an
-- error whenever the next value received does not match the expected value.

gt0_frame_check_reset_i <= reset_on_data_error_i when (EXAMPLE_CONFIG_INDEPENDENT_LANES=0) else gt0_matchn_i;

-- gt0_frame_check0 is always connected to the lane with the start of char
-- and this lane starts off the data checking on all the other lanes. The INC_IN port is tied off
gt0_inc_in_i                        <= '0';

gt0_frame_check : fmcgtx_GT_FRAME_CHECK
generic map
(
    RX_DATA_WIDTH                   => 16,
    RXCTRL_WIDTH                    => 2,
    COMMA_DOUBLE                    => x"02bc",
    WORDS_IN_BRAM                   => EXAMPLE_WORDS_IN_BRAM,
    START_OF_PACKET_CHAR            => x"02bc"
)
port map
(
    -- GT Interface
    RX_DATA_IN                      => gt0_rxdata_i,
    RXCTRL_IN                       => gt0_rxcharisk_i,
    RXENMCOMMADET_OUT               => gt0_rxmcommaalignen_i,
    RXENPCOMMADET_OUT               => gt0_rxpcommaalignen_i,
    RX_ENCHAN_SYNC_OUT              => open,
    RX_CHANBOND_SEQ_IN              => tied_to_ground_i,
    -- Control Interface
    INC_IN                          => gt0_inc_in_i,
    INC_OUT                         => gt0_inc_out_i,
    PATTERN_MATCHB_OUT              => gt0_matchn_i,
    RESET_ON_ERROR_IN               => gt0_frame_check_reset_i,
    -- System Interface
    USER_CLK                        => gt0_rxusrclk2_i,
    SYSTEM_RESET                    => gt0_rx_system_reset_c,
    ERROR_COUNT_OUT                 => gt0_error_count_i,
    TRACK_DATA_OUT                  => gt0_track_data_i
);


TRACK_DATA_OUT(31 downto 1) <= (others => '0');
TRACK_DATA_OUT(0) <= gt0_track_data_syncb;

ERROR_COUNT(31 downto 8) <= (others => '0');
ERROR_COUNT(7 downto 0) <= gt0_error_count_syncb;

-- synchronise the LINK_UP and ERROR_COUNT signals
ctrl_sync: process(drpclk_in_i)
begin
    if Rising_edge(drpclk_in_i) then
        gt0_track_data_synca <= gt0_track_data_i;
        gt0_track_data_syncb <= gt0_track_data_synca;
        gt0_error_count_synca <= gt0_error_count_i;
        gt0_error_count_syncb <= gt0_error_count_synca;
    end if;
end process;

------------ optional Ports assignments --------------
gt0_rxprbscntreset_i                         <= tied_to_ground_i;
gt0_rxprbssel_i                              <= (others => '0');
gt0_loopback_i                               <= (others => '0');

gt0_txdiffctrl_i                             <= (others => '0');
gt0_rxbufreset_i                             <= tied_to_ground_i;
gt0_rxcdrhold_i                              <= tied_to_ground_i;
gt0_rxpmareset_i                             <= tied_to_ground_i;
gt0_rxpolarity_i                             <= tied_to_ground_i;
gt0_rxpd_i                                   <= (others => '0');
gt0_txprecursor_i                            <= (others => '0');
gt0_txpostcursor_i                           <= (others => '0');
gt0_txchardispmode_i                         <= (others => '0');
gt0_txchardispval_i                          <= (others => '0');
gt0_txpolarity_i                             <= tied_to_ground_i;
gt0_txpd_i                                   <= (others => '0');
gt0_txprbsforceerr_i                         <= tied_to_ground_i;
gt0_txprbssel_i                              <= (others => '0');
------------------------------------------------------
gt0_rxlpmen_i                                <= tied_to_vcc_i;

-- assign resets for frame_gen modules
gt0_tx_system_reset_c <= not gt0_txfsmresetdone_r2;

-- assign resets for frame_check modules
gt0_rx_system_reset_c <= not gt0_rxresetdone_r3;

gt0_drpaddr_i <= (others => '0');
gt0_drpdi_i <= (others => '0');
gt0_drpen_i <= '0';
gt0_drpwe_i <= '0';

soft_reset_i <= SOFT_RESET;

end RTL;


