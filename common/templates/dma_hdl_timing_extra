parameter STATE_IDLE = 0;
parameter STATE_DATA = 1;
parameter STATE_FINISHED = 2;

reg [1:0] REQ_STATE;

integer     pfid;
integer     pr;
integer     preg_in;
integer     req_dma_len;
string      path;
string      ta_line;
reg [5:0]   cnt;
reg [31:0]  data_mem [31:0];

initial begin
end


reg [5:0]   mem_cnt = 0;

initial begin
    REQ_STATE = STATE_IDLE;
    dma_valid_i = 0;
    mem_cnt = 0;
    dma_ack_i = 0;
    dma_done_i = 0;
end

always @(posedge clk_i) begin

    case (REQ_STATE)

        STATE_IDLE:
        begin
            dma_valid_i <= 0;
            dma_done_i <= 0;
            mem_cnt <= 0;
            if (dma_req_o != 0) begin
                cnt = 0;
                path = $sformatf("{{ block.module_abspath }}/tests_assets/%0d.txt",
                    dma_addr_o);
                pfid = $fopen(path, "r");
                // Read and ignore description field
                pr = $fgets(ta_line, pfid);

                while (!$feof(pfid)) begin
                    pr = $fgets(ta_line, pfid);
                    if (ta_line.substr(0, 1) == "0x") begin
                        pr = $sscanf(ta_line, "0x%h\n", preg_in);
                    end else begin
                        pr = $sscanf(ta_line, "%d\n", preg_in);
                    end
                    data_mem[cnt] = preg_in;
                    cnt = cnt + 1;
                end
                req_dma_len <= dma_len_o;
                if (dma_len_o == 0)
                    req_dma_len <= 256;
                REQ_STATE <= STATE_DATA;
                dma_ack_i <= 1;
            end
        end

        STATE_DATA:
        begin
            dma_ack_i <= 0;
            dma_valid_i <= 1;
            // This is the last read out of the memory increment the loop counter
            if (mem_cnt == req_dma_len - 1) begin
                mem_cnt <= 0;
                dma_data_i <= data_mem[mem_cnt];
                REQ_STATE <= STATE_FINISHED;
            // Read the values out of the memory
            end else begin
                mem_cnt <= mem_cnt +1;
                dma_data_i <= data_mem[mem_cnt];
            end
         end

        STATE_FINISHED:
        begin
            // Finished reset everything
            dma_done_i <= 1;
            dma_valid_i <= 0;
            REQ_STATE <= STATE_IDLE;
        end

        default:
            REQ_STATE <= STATE_IDLE;

    endcase
end
