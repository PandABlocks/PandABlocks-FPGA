-- AUTOGENERATED
--------------------------------------------------------------------------------
-- Blocks top-level interface
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

library unisim;
use unisim.vcomponents.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity soft_blocks is
generic (
    SIM                 : string := "FALSE"
);
port (
    -- Global clock and reset from panda_ps
    FCLK_RESET0         : in    std_logic;
    -- Configuration and Status Interface Block
    read_strobe         : in    std_logic_vector(MOD_COUNT-1 downto 0);
    read_address        : in    std_logic_vector(PAGE_AW-1 downto 0);
    read_data           : out   std32_array(MOD_COUNT-1 downto {{ carrier_mod_count }});
    read_ack            : out   std_logic_vector(MOD_COUNT-1 downto {{ carrier_mod_count }});
    write_strobe        : in    std_logic_vector(MOD_COUNT-1 downto 0);
    write_address       : in    std_logic_vector(PAGE_AW-1 downto 0);
    write_data          : in    std_logic_vector(31 downto 0);
    write_ack           : out   std_logic_vector(MOD_COUNT-1 downto {{ carrier_mod_count }});
    -- Bus Outputs
    bit_bus_i           : in    bit_bus_t;
    bit_bus_o           : out   std_logic_vector(BBUSW-1 downto BIT_BUS_SIZE);

    pos_bus_i           : in    pos_bus_t;
    pos_bus_o           : out   std32_array(PBUSW-1 downto POS_BUS_SIZE);
    -- DMA Blocks
    rdma_req            : out   std_logic_vector(5 downto 0);
    rdma_ack            : in    std_logic_vector(5 downto 0);
    rdma_done           : in    std_logic;
    rdma_addr           : out   std32_array(5 downto 0);
    rdma_len            : out   std8_array(5 downto 0);
    rdma_data           : in    std_logic_vector(31 downto 0);
    rdma_valid          : in    std_logic_vector(5 downto 0);
    --
    {% for site in target_sites %}
        {% if site.number == 1 %}
            {% for dir in site.dirs %}
                {% if dir == "i" %}
    {{pad(site.name + "_i")}} : in    {{site.name}}_input_interface;
                {% elif dir =="io" %}
    {{pad(site.name + "_io")}} : inout {{site.name}}_inout_interface := {{site.name}}_io_init;
                {% elif dir =="o" %}
    {{pad(site.name + "_o")}} : out   {{site.name}}_output_interface := {{site.name}}_o_init;
                {% endif %}
            {% endfor %}
        {% else %}
            {% for i in range (site.number) %}
                {% for dir in site.dirs %}
                    {% if dir == "i" %}
    {{pad(site.name + (i+1)|string + "_i")}} : in    {{site.name}}_input_interface;
                    {% elif dir =="io" %}
    {{pad(site.name+ (i+1)|string +"_io")}} : inout {{site.name}}_inout_interface := {{site.name}}_io_init;
                    {% elif dir =="o" %}
    {{pad(site.name+ (i+1)|string +"_o")}} : out   {{site.name}}_output_interface := {{site.name}}_o_init;
                    {% endif %}
                {% endfor %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    FCLK_CLK0           : in    std_logic
);
end soft_blocks;

architecture rtl of soft_blocks is
-- Chip selects and Block Num constants are declared in addr_defines

begin
{# Using a namespace jinja2 object may make iterating simpler #}
{% set dma = [0] %}
{% for block in fpga_blocks if block.type in "soft|dma|io"%}
--------------------------------------------------------------------------------
-- {{block.entity}} - {{block.description}}
--------------------------------------------------------------------------------
{{ block.name }}_inst : entity work.{{ block.entity }}_wrapper
{% if block.number > 1 %}
generic map (NUM => {{ block.entity }}_NUM)
{% endif %}
port map (

    reset_i             => FCLK_RESET0,

    read_strobe_i       => read_strobe({{ block.name }}_CS),
    read_address_i      => read_address,
    read_data_o         => read_data({{ block.name }}_CS),
    read_ack_o          => read_ack({{ block.name }}_CS),

    write_strobe_i      => write_strobe({{ block.name }}_CS),
    write_address_i     => write_address,
    write_data_i        => write_data,
    write_ack_o         => write_ack({{ block.name }}_CS),
    {% if block.type == "dma" %}

    dma_req_o           => rdma_req({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_ack_i           => rdma_ack({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_done_i          => rdma_done,
    dma_addr_o          => rdma_addr({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_len_o           => rdma_len({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
    dma_data_i          => rdma_data,
    dma_valid_i         => rdma_valid({{ dma[0] + block.number - 1 }} downto {{ dma[0] }}),
        {% if dma.append(dma.pop() + 1) %}{% endif %}
    {% elif block.interfaces %}
        {% for interface in block.interfaces %}
    {{ pad(interface[0]) }} => {{ interface[1] }},
        {% endfor %}
    {% endif %}

    bit_bus_i           => bit_bus_i,
    pos_bus_i           => pos_bus_i,
    {% for field in block.filter_fields("bit_out") %}
    {{ pad(field.name + "_o") }} => bit_bus_o({{ field.bus_entries[-1].index }} downto {{ field.bus_entries[0].index }}),
    {% endfor %}
    {% for field in block.filter_fields("pos_out") %}
    {{ pad(field.name + "_o") }} => pos_bus_o({{ field.bus_entries[-1].index }} downto {{ field.bus_entries[0].index }}),
    {% endfor %}

    clk_i               => FCLK_CLK0
);
{% endfor %}
bit_bus_o(BBUSW-1 downto {{ total_bit_bus_length }}) <= (others => '0');
pos_bus_o(PBUSW-1 downto {{ total_pos_bus_length }}) <= (others => (others => '0'));

read_ack(31 downto USED_MOD_COUNT + 1) <= (others => '1');
write_ack(31 downto USED_MOD_COUNT + 1) <= (others => '1');
read_data(31 downto USED_MOD_COUNT + 1) <= (others => (others => '0'));
end rtl;
