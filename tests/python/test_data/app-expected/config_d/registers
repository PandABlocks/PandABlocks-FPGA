# Register interface definition

# Kernel driver compatibility version.  This must be updated when the register
# set in *DRV changes or if the FPGA changes in any other way that requires a
# driver change.  The driver will refuse to load if this does not match the
# value returned by *DRV.DRV_COMPAT_VERSION
DRIVER_COMPAT_VERSION = 1

# PandA Blocks compatibility version.  This is checked by the server when
# loading the registers file, and should be updated when the interface to the
# server has changed in an incompatible way.
BLOCKS_COMPAT_VERSION = 0


# This special register block is not present in the config file and contains
# fixed register definitions used in the hardware interface.
*REG        0
    #
    # FPGA Version and Build Identification Values
    #
    FPGA_VERSION            0
    FPGA_BUILD              1
    USER_VERSION            2
    # Bit bus readout registers: first write to BIT_READ_RST to capture a
    # snapshot of the bit bus and its changes, then read BIT_READ_VALUE 8 times
    # to read out bit bus values and change flags.
    BIT_READ_RST            3
    BIT_READ_VALUE          4

    # Position bus readout registers: first write to POS_READ_RST to snapshot
    # the position bus and the change set, then read POS_READ_VALUE 32 times to
    # read out the positions, and finally read the change set from
    # POS_READ_CHANGES.
    POS_READ_RST            5
    POS_READ_VALUE          6
    POS_READ_CHANGES        7

    # The capture set is written by first writing to PCAP_START_WRITE and then
    # writing the required changes to PCAP_WRITE
    PCAP_START_WRITE        8
    PCAP_WRITE              9

    # Hardware timestamps
    # This starts at unix epoch (UTC)
    PCAP_TS_SEC             opt 10
    # Ticks since PCAP_TS_SEC was updated
    PCAP_TS_TICKS           opt 11

    # Position capture control
    PCAP_ARM                13
    PCAP_DISARM             14

    # FPGA Capabilities Value
    FPGA_CAPABILITIES       15

    # Range of MAC addresses
    MAC_ADDRESS_BASE        16 .. 23

    # Nominal clock.  If this register is non zero the value returned will be
    # used as the reported clock frequency in Hz, otherwise the standard
    # frequency of 125 MHz will be reported and used.
    NOMINAL_CLOCK           24


# These registers are used by the kernel driver to read the data capture stream.
# This block is not used by the server, but is here for documentation and other
# automated tools.
*DRV        1
    # This register is used to reset DMA engine.
    PCAP_DMA_RESET          0
    # This register is used to initialise DMA engine with first set of
    # addresses.
    PCAP_DMA_START          1
    # The physical address of each DMA block is written to this register.
    PCAP_DMA_ADDR           2
    # This register configures the maximum interval between capture interrupts
    PCAP_TIMEOUT            3
    # Interrupt status and acknowledge
    PCAP_IRQ_STATUS         4
    # DMA block size in bytes
    PCAP_BLOCK_SIZE         6

    # Kernel driver compatiblity version check register.  The value in this
    # register must match DRIVER_COMPAT_VERSION.
    COMPAT_VERSION          7

LUT                 2
    INPA                0 1
    INPB                2 3
    INPC                4 5
    INPD                6 7
    INPE                8 9
    TYPEA               10
    TYPEB               11
    TYPEC               12
    TYPED               13
    TYPEE               14
    FUNC                15
    OUT                 0 1 2 3 4 5 6 7

